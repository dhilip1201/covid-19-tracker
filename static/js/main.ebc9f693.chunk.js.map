{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","isRed","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapCountries","setMapCountries","mapZoom","setMapZoom","setCasesType","name","iso2","sortedData","getCountriesData","onCountrychange","event","countryCode","target","href","FormControl","Select","varient","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ebc9f693.chunk.js","sourcesContent":["import React from 'react'\r\nimport './InfoBox.css'\r\nimport { Card, CardContent, Typography} from '@material-ui/core';\r\n\r\nfunction InfoBox({title, cases, total,isRed, active, ...props}) {\r\n    return (\r\n        \r\n             <Card \r\n             onClick={props.onClick}\r\n             className={`infoBox ${active && `infoBox--selected`} ${isRed && `infoBox--red`}`}>\r\n                <CardContent>\r\n                    <Typography className=\"infoBox__title\" color=\"textSecondary\" >\r\n                        {title}\r\n                    </Typography>\r\n                    <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases} </h2>\r\n                    <Typography className=\"infoBox__total\" color=\"textSecondary\" >\r\n                        {total} total\r\n                    </Typography>\r\n                </CardContent>\r\n     \r\n            </Card>\r\n        \r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport {Circle, Popup} from 'react-leaflet';\r\n\r\nconst casesTypeColors= {\r\n    cases:{\r\n        hex: '#CC1034',\r\n        multiplier:800,\r\n    },\r\n    recovered:{\r\n        hex: '#7dd71d',\r\n        multiplier:1200,\r\n    },\r\n    deaths:{\r\n        hex: '#fb4443',\r\n        multiplier:2000,\r\n    },\r\n};\r\n\r\nexport const sortData= (data)=>{\r\n   const sortedData = [...data];\r\n   return sortedData.sort((a,b)=> a.cases > b.cases ? -1 : 1);\r\n\r\n};\r\n export const prettyPrintStat = (stat) =>\r\n stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\"\r\n\r\n\r\nexport const showDataOnMap =(data, casesType =\"cases\")=>(\r\n    data.map(country => (\r\n        <Circle \r\n        center={[country.countryInfo.lat, country.countryInfo.long]} \r\n        fillOpacity={0.4}\r\n        color  ={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius={\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n        >\r\n\r\n        <Popup>\r\n           <div className=\"info__container\">\r\n               <div className=\"info__flag\"\r\n                   style={{backgroundImage:`url(${country.countryInfo.flag})`}}\r\n                />               \r\n              <div className=\"info__name\">{country.country}</div>\r\n              <div className=\"info__confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n               <div className=\"info__recovered\">Recovered:{numeral(country.recovered).format(\"0,0\")}</div>\r\n               <div className=\"info__deaths\">Deaths:{numeral(country.deaths).format(\"0,0\")}</div>\r\n           </div>\r\n        </Popup>\r\n        </Circle>\r\n    ))\r\n)\r\n\r\n\r\n","import React from 'react'\r\nimport \"./Map.css\"\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport {showDataOnMap} from \"./util.js\"\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" \r\n                attribution = '&copy; <a href=\"http://osm.org/copyright\"> OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n            countries.map(({country, cases}) =>(\r\n                <tr>\r\n                <td>{country}</td>\r\n                <td><strong>{cases}</strong></td>\r\n            </tr>\r\n            )\r\n               \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React,{useState, useEffect} from 'react'\r\nimport {Line} from \"react-chartjs-2\"\r\nimport numeral from \"numeral\";\r\n const options = {\r\n     legend:{\r\n         display:false,\r\n     },\r\n     elements:{\r\n         point:{\r\n             radius:0\r\n         },\r\n     },\r\n     maintainAspectRatio: false,\r\n     tooltips:{\r\n         mode: \"index\",\r\n         intersect: false,\r\n         callbacks:{\r\n             label:function(tooltipItem, data){\r\n                 return numeral(tooltipItem.value).format(\"+0,0\");\r\n             },\r\n         },\r\n     },\r\n     scales:{\r\n         xAxes:[\r\n            { \r\n                type:\"time\",\r\n             time:{\r\n                 format:\"MM/DD/YY\",\r\n                 tooltipFormat:\"ll\",\r\n                 },\r\n            },\r\n         ],\r\n         yAxes:[\r\n             {\r\n                 gridLines:{\r\n                     display:false,\r\n                 },\r\n                 ticks:{\r\n                     callback: function(value, index, values){\r\n                         return numeral(value).format(\"0a\");\r\n                     },\r\n                 },\r\n             },\r\n         ],\r\n     },\r\n };\r\n const buildChartData =(data, casesType) =>{\r\n    let chartData=[];\r\n    let lastDataPoint;\r\n    for(let date in data.cases){\r\n        if(lastDataPoint){\r\n            let newDataPoint={\r\n            x: date,\r\n            y:data[casesType][date]- lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\nfunction LineGraph({casesType}) {\r\n    const [data, setData] = useState({});\r\n    useEffect(() => {\r\n    const fetchData= async () =>{\r\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n            return response.json()\r\n        })\r\n        .then((data) => {\r\n         let chartData = buildChartData(data, casesType);\r\n         setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n   \r\n}, [casesType]);\r\n    return (\r\n        <div>\r\n            {data?.length> 0 && (\r\n                 <Line \r\n                 options={options}\r\n                 data={{\r\n                     datasets: [{\r\n                         backgroundColor:\"rgba(204,16,52,0.5)\",\r\n                         borderColor:\"#CC1034\",\r\n                         data:data,\r\n                     },\r\n                 ], \r\n                 }} />\r\n            )}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React,{useState, useEffect} from 'react';\nimport { FormControl, Select, MenuItem, Card, CardContent} from '@material-ui/core';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport {sortData, prettyPrintStat} from \"./util\"\nimport LineGraph from './LineGraph';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport \"leaflet/dist/leaflet.css\"\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  // const [mapCenter, setMapCenter] = useState({lat:34.80746, lng:-40.4796})\n  const [mapCenter, setMapCenter] = useState({lat:20, lng:70})\n  const [mapCountries, setMapCountries] = useState([])\n  const [mapZoom, setMapZoom] = useState(2)\n  const [casesType, setCasesType] = useState(\"cases\")\n\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data =>{\n      setCountryInfo(data)\n    })\n  }, [])\n  useEffect(() => {\n    const getCountriesData = async ()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data)=>{\n       const countries = data.map((country)=>({\n           name: country.country,\n           value:country.countryInfo.iso2,\n         }));\n         const sortedData = sortData(data);\n         setTableData(sortedData);\n         setMapCountries(data);\n         setCountries(countries);\n      });\n      \n    };\n    getCountriesData();\n },[]);\n const onCountrychange =async (event)=>{\n   const countryCode=event.target.value\n   setCountry(countryCode);\n   const url =countryCode === 'wordlwide'? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n   await fetch(url)\n   .then(response => response.json())\n   .then(data =>{\n    setCountry(countryCode);\n    setCountryInfo(data);\n    setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n    setMapZoom(4);\n   })\n };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n        <div className=\"app__title\">\n        <h1>COVID-19 TRACKER</h1>\n        <h5 className=\"app__creater\">Developed by Aadvik Dhilip</h5>\n        </div>\n          <div className=\"header__github\">\n              {/* <img src=\"\" alt=\"\"/> */}\n              <a href=\"https://github.com/dhilip1201/covid-19-tracker\" target=\"_blank\">\n              <GitHubIcon />GitHub\n              </a>\n            </div>\n      <FormControl className=\"app__formcontrol\">\n        <Select className=\"app_dropdown\"\n          varient=\"outlined\"\n          onChange={onCountrychange}\n          value={country}\n        >\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n         {\n            countries.map(country=> \n            <MenuItem value={country.value}>{country.name} </MenuItem>)\n          }\n          \n          \n        </Select>\n      </FormControl>\n      </div>\n      <div className=\"app_status\">\n        <InfoBox \n        isRed\n        active = {casesType === 'cases'}\n         onClick={e=>setCasesType('cases')}\n        title=\"Coronavirus cases\" \n        cases={prettyPrintStat(countryInfo.todayCases)} \n        total={prettyPrintStat(countryInfo.cases)}\n         />\n        <InfoBox \n        \n        active = {casesType === 'recovered'}\n        onClick={e=>setCasesType('recovered')}\n        title=\"Recovered\" \n        cases={prettyPrintStat(countryInfo.todayRecovered)} \n        total={prettyPrintStat(countryInfo.recovered)}\n         />\n        <InfoBox \n        isRed\n        active = {casesType === 'deaths'}\n         onClick={e=>setCasesType('deaths')}\n        title=\"Deaths\" \n        cases={prettyPrintStat(countryInfo.todayDeaths)} \n        total={prettyPrintStat(countryInfo.deaths)} \n        />\n      </div>\n      <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n      <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n\n            <h3 className=\"app__graphtitle\">World wide new {casesType}</h3>\n            \n            <LineGraph className=\"app__graph\" casesType={casesType}/>\n          </CardContent>\n      </Card>\n      \n     \n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}